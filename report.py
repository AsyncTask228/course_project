# analyzers/report.py

from datetime import datetime

# –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏–π
from analyzers import (
    auth_analyzer,
    ssh_analyzer,
    session_analyzer,
    network_analyzer,
    process_analyzer,
    file_analyzer,
    device_analyzer
)

# –°–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤: (–∏–º—è, —Ñ—É–Ω–∫—Ü–∏—è)
ANALYZERS = [
    ("auth", auth_analyzer),
    ("ssh", ssh_analyzer),
    ("session", session_analyzer),
    ("network", network_analyzer),
    ("process", process_analyzer),
    ("file", file_analyzer),
    ("device", device_analyzer)
]


def run_all():
    all_alerts = []

    print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤...\n")
    for name, analyzer_func in ANALYZERS:
        try:
            print(f"üîç –ê–Ω–∞–ª–∏–∑: {name}_analyzer...")
            alerts = analyzer_func()
            all_alerts.extend(alerts)
            print(f"‚úÖ {name}_analyzer: –Ω–∞–π–¥–µ–Ω–æ {len(alerts)} —Å–æ–±—ã—Ç–∏–π.\n")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {name}_analyzer: {e}")

    return sorted(all_alerts, key=lambda x: x['timestamp'])


def print_report(alerts):
    print("\nüìä [–ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç –ø–æ –∞–Ω–æ–º–∞–ª–∏—è–º]\n")
    for a in alerts:
        print(f"[{a['severity'].upper()}] ({a['type']}) {a['username']} @ {a['timestamp']} ‚Üí {a['message']} [score: {a.get('risk_score', '?')}]")

    print(f"\nüì¶ –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(alerts)}")


def save_to_file(alerts, path="anomaly_report.txt"):
    with open(path, "w") as f:
        f.write("–ê–Ω–∞–ª–∏–∑ –∞–Ω–æ–º–∞–ª–∏–π (" + datetime.now().strftime("%Y-%m-%d %H:%M:%S") + ")\n\n")
        for a in alerts:
            f.write(f"[{a['severity'].upper()}] ({a['type']}) {a['username']} @ {a['timestamp']} ‚Üí {a['message']} [score: {a.get('risk_score', '?')}]\n")
    print(f"\nüìÅ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {path}")


if __name__ == "__main__":
    alerts = run_all()
    print_report(alerts)
    save_to_file(alerts)
