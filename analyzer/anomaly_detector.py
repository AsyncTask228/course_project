# analyzer/anomaly_detector.py
import sqlite3
from datetime import datetime, timedelta
import os
from collections import Counter, defaultdict

DB_PATH = os.path.join(os.path.dirname(__file__), "../logger/activity_logs.db")

def fetch_table(query, params=None):
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(query, params or [])
    rows = cursor.fetchall()
    conn.close()
    return rows

def analyze_auth_activity():
    rows = fetch_table("SELECT timestamp, username, ip_address, mac_address FROM auth_logs")
    user_logins = defaultdict(list)

    for timestamp, username, ip, mac in rows:
        dt = datetime.strptime(timestamp, "%Y-%m-%d %H:%M:%S")
        user_logins[username].append((dt, ip, mac))

    for user, records in user_logins.items():
        ips = {ip for _, ip, _ in records}
        macs = {mac for _, _, mac in records}
        hours = [dt.hour for dt, _, _ in records]
        late_hours = [h for h in hours if h < 6 or h > 22]

        print(f"\nüîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")
        print(f"‚Ä¢ –í—Å–µ–≥–æ –≤—Ö–æ–¥–æ–≤: {len(records)}")
        print(f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö IP: {len(ips)}, MAC: {len(macs)}")
        if late_hours:
            print(f"‚ö†Ô∏è –í—Ö–æ–¥—ã –≤ –Ω–µ—Ç–∏–ø–∏—á–Ω–æ–µ –≤—Ä–µ–º—è: {late_hours}")
        if len(ips) > 3:
            print(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–æ–≤")

def analyze_sessions():
    rows = fetch_table("SELECT username, login_time, logout_time FROM sessions")
    session_durations = defaultdict(list)

    for user, start, end in rows:
        if not end:
            continue
        dt_start = datetime.strptime(start, "%Y-%m-%d %H:%M:%S")
        dt_end = datetime.strptime(end, "%Y-%m-%d %H:%M:%S")
        duration = (dt_end - dt_start).total_seconds() / 60
        session_durations[user].append(duration)

    for user, durations in session_durations.items():
        avg = sum(durations) / len(durations)
        print(f"\n‚è≥ –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user}:")
        print(f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {avg:.1f} –º–∏–Ω")
        if any(d > avg * 2 for d in durations):
            print(f"‚ö†Ô∏è –ï—Å—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏")

def analyze_process_repetition():
    rows = fetch_table("SELECT username, command FROM process_logs")
    user_cmds = defaultdict(list)

    for user, cmd in rows:
        user_cmds[user].append(cmd.split()[0])  # –∏–º—è –∫–æ–º–∞–Ω–¥—ã

    for user, cmds in user_cmds.items():
        counter = Counter(cmds)
        frequent = [cmd for cmd, count in counter.items() if count > 20]
        if frequent:
            print(f"\nüîÅ –ß–∞—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã —É {user}: {frequent}")
            print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∏–ª–∏ —Å–∫—Ä–∏–ø—Ç")

def analyze_geo_activity():
    rows = fetch_table("SELECT username, remote_ip, location FROM network_logs")
    user_geo = defaultdict(list)

    for username, ip, location in rows:
        user_geo[username].append(location)

    for user, locations in user_geo.items():
        location_counts = Counter(locations)
        print(f"\nüåç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —Å–µ—Ç–µ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {user}")
        print(f"‚Ä¢ –°—Ç—Ä–∞–Ω—ã: {dict(location_counts)}")

        uncommon = [loc for loc in location_counts if loc not in ("RU", "BY", "UA", "Unknown")]
        if uncommon:
            print(f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã: {uncommon}")

def run_all():
    print("=== –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===")
    analyze_auth_activity()
    analyze_sessions()
    analyze_process_repetition()
    analyze_geo_activity()
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω.")

if __name__ == "__main__":
    run_all()
